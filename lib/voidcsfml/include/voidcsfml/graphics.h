#ifndef VOIDCSFML_GRAPHICS_H
#define VOIDCSFML_GRAPHICS_H
#include <voidcsfml/window.h>
#include <voidcsfml/config.h>
#include <voidcsfml/system.h>
VOIDCSFML_API sfml_graphics_version(int*, int*, int*);
VOIDCSFML_API sfml_blendmode_allocate(void** result);
VOIDCSFML_API sfml_blendmode_free(void* self);
VOIDCSFML_API sfml_blendmode_initialize(void* self);
VOIDCSFML_API sfml_blendmode_initialize_8xr8xrBw1(void* self, int source_factor, int destination_factor, int blend_equation);
VOIDCSFML_API sfml_blendmode_initialize_8xr8xrBw18xr8xrBw1(void* self, int color_source_factor, int color_destination_factor, int color_blend_equation, int alpha_source_factor, int alpha_destination_factor, int alpha_blend_equation);
VOIDCSFML_API sfml_blendmode_setcolorsrcfactor_8xr(void* self, int color_src_factor);
VOIDCSFML_API sfml_blendmode_setcolordstfactor_8xr(void* self, int color_dst_factor);
VOIDCSFML_API sfml_blendmode_setcolorequation_Bw1(void* self, int color_equation);
VOIDCSFML_API sfml_blendmode_setalphasrcfactor_8xr(void* self, int alpha_src_factor);
VOIDCSFML_API sfml_blendmode_setalphadstfactor_8xr(void* self, int alpha_dst_factor);
VOIDCSFML_API sfml_blendmode_setalphaequation_Bw1(void* self, int alpha_equation);
VOIDCSFML_API sfml_operator_eq_PG5PG5(void* left, void* right, unsigned char* result);
VOIDCSFML_API sfml_operator_ne_PG5PG5(void* left, void* right, unsigned char* result);
VOIDCSFML_API sfml_blendmode_initialize_PG5(void* self, void* copy);
VOIDCSFML_API sfml_transform_allocate(void** result);
VOIDCSFML_API sfml_transform_free(void* self);
VOIDCSFML_API sfml_transform_initialize(void* self);
VOIDCSFML_API sfml_transform_initialize_Bw9Bw9Bw9Bw9Bw9Bw9Bw9Bw9Bw9(void* self, float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22);
VOIDCSFML_API sfml_transform_getmatrix(void* self, float** result);
VOIDCSFML_API sfml_transform_getinverse(void* self, void* result);
VOIDCSFML_API sfml_transform_transformpoint_Bw9Bw9(void* self, float x, float y, void* result);
VOIDCSFML_API sfml_transform_transformpoint_UU2(void* self, void* point, void* result);
VOIDCSFML_API sfml_transform_transformrect_WPZ(void* self, void* rectangle, void* result);
VOIDCSFML_API sfml_transform_combine_FPe(void* self, void* transform, void* result);
VOIDCSFML_API sfml_transform_translate_Bw9Bw9(void* self, float x, float y, void* result);
VOIDCSFML_API sfml_transform_translate_UU2(void* self, void* offset, void* result);
VOIDCSFML_API sfml_transform_rotate_Bw9(void* self, float angle, void* result);
VOIDCSFML_API sfml_transform_rotate_Bw9Bw9Bw9(void* self, float angle, float center_x, float center_y, void* result);
VOIDCSFML_API sfml_transform_rotate_Bw9UU2(void* self, float angle, void* center, void* result);
VOIDCSFML_API sfml_transform_scale_Bw9Bw9(void* self, float scale_x, float scale_y, void* result);
VOIDCSFML_API sfml_transform_scale_Bw9Bw9Bw9Bw9(void* self, float scale_x, float scale_y, float center_x, float center_y, void* result);
VOIDCSFML_API sfml_transform_scale_UU2(void* self, void* factors, void* result);
VOIDCSFML_API sfml_transform_scale_UU2UU2(void* self, void* factors, void* center, void* result);
VOIDCSFML_API sfml_operator_mul_FPeFPe(void* left, void* right, void* result);
VOIDCSFML_API sfml_operator_mul_FPeUU2(void* left, void* right, void* result);
VOIDCSFML_API sfml_transform_initialize_FPe(void* self, void* copy);
VOIDCSFML_API sfml_renderstates_allocate(void** result);
VOIDCSFML_API sfml_renderstates_free(void* self);
VOIDCSFML_API sfml_renderstates_initialize(void* self);
VOIDCSFML_API sfml_renderstates_initialize_PG5(void* self, void* blend_mode);
VOIDCSFML_API sfml_renderstates_initialize_FPe(void* self, void* transform);
VOIDCSFML_API sfml_renderstates_initialize_MXd(void* self, void* texture);
VOIDCSFML_API sfml_renderstates_initialize_8P6(void* self, void* shader);
VOIDCSFML_API sfml_renderstates_initialize_PG5FPeMXd8P6(void* self, void* blend_mode, void* transform, void* texture, void* shader);
VOIDCSFML_API sfml_renderstates_setblendmode_CPE(void* self, void* blend_mode);
VOIDCSFML_API sfml_renderstates_settransform_lbe(void* self, void* transform);
VOIDCSFML_API sfml_renderstates_settexture_MXd(void* self, void* texture);
VOIDCSFML_API sfml_renderstates_setshader_8P6(void* self, void* shader);
VOIDCSFML_API sfml_renderstates_initialize_mi4(void* self, void* copy);
VOIDCSFML_API sfml_drawable_allocate(void** result);
VOIDCSFML_API sfml_drawable_free(void* self);
VOIDCSFML_API sfml_transformable_allocate(void** result);
VOIDCSFML_API sfml_transformable_free(void* self);
VOIDCSFML_API sfml_transformable_initialize(void* self);
VOIDCSFML_API sfml_transformable_finalize(void* self);
VOIDCSFML_API sfml_transformable_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_transformable_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_transformable_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_transformable_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_transformable_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_transformable_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_transformable_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_transformable_getposition(void* self, void* result);
VOIDCSFML_API sfml_transformable_getrotation(void* self, float* result);
VOIDCSFML_API sfml_transformable_getscale(void* self, void* result);
VOIDCSFML_API sfml_transformable_getorigin(void* self, void* result);
VOIDCSFML_API sfml_transformable_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_transformable_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_transformable_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_transformable_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_transformable_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_transformable_gettransform(void* self, void* result);
VOIDCSFML_API sfml_transformable_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_transformable_initialize_dkg(void* self, void* copy);
VOIDCSFML_API sfml_color_allocate(void** result);
VOIDCSFML_API sfml_color_free(void* self);
VOIDCSFML_API sfml_color_initialize(void* self);
VOIDCSFML_API sfml_color_initialize_9yU9yU9yU9yU(void* self, uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha);
VOIDCSFML_API sfml_color_initialize_saL(void* self, uint32_t color);
VOIDCSFML_API sfml_color_tointeger(void* self, uint32_t* result);
VOIDCSFML_API sfml_color_setr_9yU(void* self, uint8_t r);
VOIDCSFML_API sfml_color_setg_9yU(void* self, uint8_t g);
VOIDCSFML_API sfml_color_setb_9yU(void* self, uint8_t b);
VOIDCSFML_API sfml_color_seta_9yU(void* self, uint8_t a);
VOIDCSFML_API sfml_operator_eq_QVeQVe(void* left, void* right, unsigned char* result);
VOIDCSFML_API sfml_operator_ne_QVeQVe(void* left, void* right, unsigned char* result);
VOIDCSFML_API sfml_operator_add_QVeQVe(void* left, void* right, void* result);
VOIDCSFML_API sfml_operator_sub_QVeQVe(void* left, void* right, void* result);
VOIDCSFML_API sfml_operator_mul_QVeQVe(void* left, void* right, void* result);
VOIDCSFML_API sfml_color_initialize_QVe(void* self, void* copy);
VOIDCSFML_API sfml_vertex_allocate(void** result);
VOIDCSFML_API sfml_vertex_free(void* self);
VOIDCSFML_API sfml_vertex_initialize(void* self);
VOIDCSFML_API sfml_vertex_initialize_UU2(void* self, void* position);
VOIDCSFML_API sfml_vertex_initialize_UU2QVe(void* self, void* position, void* color);
VOIDCSFML_API sfml_vertex_initialize_UU2UU2(void* self, void* position, void* tex_coords);
VOIDCSFML_API sfml_vertex_initialize_UU2QVeUU2(void* self, void* position, void* color, void* tex_coords);
VOIDCSFML_API sfml_vertex_setposition_llt(void* self, void* position);
VOIDCSFML_API sfml_vertex_setcolor_9qU(void* self, void* color);
VOIDCSFML_API sfml_vertex_settexcoords_llt(void* self, void* tex_coords);
VOIDCSFML_API sfml_vertex_initialize_Y3J(void* self, void* copy);
VOIDCSFML_API sfml_vertexarray_allocate(void** result);
VOIDCSFML_API sfml_vertexarray_finalize(void* self);
VOIDCSFML_API sfml_vertexarray_free(void* self);
VOIDCSFML_API sfml_vertexarray_initialize(void* self);
VOIDCSFML_API sfml_vertexarray_initialize_u9wvgv(void* self, int type, size_t vertex_count);
VOIDCSFML_API sfml_vertexarray_getvertexcount(void* self, size_t* result);
VOIDCSFML_API sfml_vertexarray_operator_indexset_vgvRos(void* self, size_t index, void* value);
VOIDCSFML_API sfml_vertexarray_operator_index_vgv(void* self, size_t index, void* result);
VOIDCSFML_API sfml_vertexarray_clear(void* self);
VOIDCSFML_API sfml_vertexarray_resize_vgv(void* self, size_t vertex_count);
VOIDCSFML_API sfml_vertexarray_append_Y3J(void* self, void* vertex);
VOIDCSFML_API sfml_vertexarray_setprimitivetype_u9w(void* self, int type);
VOIDCSFML_API sfml_vertexarray_getprimitivetype(void* self, int* result);
VOIDCSFML_API sfml_vertexarray_getbounds(void* self, void* result);
VOIDCSFML_API sfml_vertexarray_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_vertexarray_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_vertexarray_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_vertexarray_initialize_EXB(void* self, void* copy);
VOIDCSFML_API sfml_shape_getpointcount_callback(void (*callback)(void*, size_t*));
VOIDCSFML_API sfml_shape_getpoint_callback(void (*callback)(void*, size_t, void*));
VOIDCSFML_API sfml_shape_parent(void* self, void* parent);
VOIDCSFML_API sfml_shape_allocate(void** result);
VOIDCSFML_API sfml_shape_free(void* self);
VOIDCSFML_API sfml_shape_finalize(void* self);
VOIDCSFML_API sfml_shape_settexture_MXdGZq(void* self, void* texture, unsigned char reset_rect);
VOIDCSFML_API sfml_shape_settexturerect_2k1(void* self, void* rect);
VOIDCSFML_API sfml_shape_setfillcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_shape_setoutlinecolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_shape_setoutlinethickness_Bw9(void* self, float thickness);
VOIDCSFML_API sfml_shape_gettexture(void* self, void** result);
VOIDCSFML_API sfml_shape_gettexturerect(void* self, void* result);
VOIDCSFML_API sfml_shape_getfillcolor(void* self, void* result);
VOIDCSFML_API sfml_shape_getoutlinecolor(void* self, void* result);
VOIDCSFML_API sfml_shape_getoutlinethickness(void* self, float* result);
VOIDCSFML_API sfml_shape_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_shape_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_shape_initialize(void* self);
VOIDCSFML_API sfml_shape_update(void* self);
VOIDCSFML_API sfml_shape_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_shape_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_shape_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_shape_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_shape_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_shape_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_shape_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_shape_getposition(void* self, void* result);
VOIDCSFML_API sfml_shape_getrotation(void* self, float* result);
VOIDCSFML_API sfml_shape_getscale(void* self, void* result);
VOIDCSFML_API sfml_shape_getorigin(void* self, void* result);
VOIDCSFML_API sfml_shape_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_shape_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_shape_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_shape_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_shape_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_shape_gettransform(void* self, void* result);
VOIDCSFML_API sfml_shape_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_shape_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_shape_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_shape_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_shape_initialize_r5K(void* self, void* copy);
VOIDCSFML_API sfml_circleshape_allocate(void** result);
VOIDCSFML_API sfml_circleshape_finalize(void* self);
VOIDCSFML_API sfml_circleshape_free(void* self);
VOIDCSFML_API sfml_circleshape_initialize_Bw9vgv(void* self, float radius, size_t point_count);
VOIDCSFML_API sfml_circleshape_setradius_Bw9(void* self, float radius);
VOIDCSFML_API sfml_circleshape_getradius(void* self, float* result);
VOIDCSFML_API sfml_circleshape_setpointcount_vgv(void* self, size_t count);
VOIDCSFML_API sfml_circleshape_getpointcount(void* self, size_t* result);
VOIDCSFML_API sfml_circleshape_getpoint_vgv(void* self, size_t index, void* result);
VOIDCSFML_API sfml_circleshape_settexture_MXdGZq(void* self, void* texture, unsigned char reset_rect);
VOIDCSFML_API sfml_circleshape_settexturerect_2k1(void* self, void* rect);
VOIDCSFML_API sfml_circleshape_setfillcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_circleshape_setoutlinecolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_circleshape_setoutlinethickness_Bw9(void* self, float thickness);
VOIDCSFML_API sfml_circleshape_gettexture(void* self, void** result);
VOIDCSFML_API sfml_circleshape_gettexturerect(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getfillcolor(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getoutlinecolor(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getoutlinethickness(void* self, float* result);
VOIDCSFML_API sfml_circleshape_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_circleshape_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_circleshape_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_circleshape_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_circleshape_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_circleshape_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_circleshape_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_circleshape_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_circleshape_getposition(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getrotation(void* self, float* result);
VOIDCSFML_API sfml_circleshape_getscale(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getorigin(void* self, void* result);
VOIDCSFML_API sfml_circleshape_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_circleshape_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_circleshape_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_circleshape_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_circleshape_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_circleshape_gettransform(void* self, void* result);
VOIDCSFML_API sfml_circleshape_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_circleshape_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_circleshape_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_circleshape_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_circleshape_initialize_Ii7(void* self, void* copy);
VOIDCSFML_API sfml_convexshape_allocate(void** result);
VOIDCSFML_API sfml_convexshape_finalize(void* self);
VOIDCSFML_API sfml_convexshape_free(void* self);
VOIDCSFML_API sfml_convexshape_initialize_vgv(void* self, size_t point_count);
VOIDCSFML_API sfml_convexshape_setpointcount_vgv(void* self, size_t count);
VOIDCSFML_API sfml_convexshape_getpointcount(void* self, size_t* result);
VOIDCSFML_API sfml_convexshape_setpoint_vgvUU2(void* self, size_t index, void* point);
VOIDCSFML_API sfml_convexshape_getpoint_vgv(void* self, size_t index, void* result);
VOIDCSFML_API sfml_convexshape_settexture_MXdGZq(void* self, void* texture, unsigned char reset_rect);
VOIDCSFML_API sfml_convexshape_settexturerect_2k1(void* self, void* rect);
VOIDCSFML_API sfml_convexshape_setfillcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_convexshape_setoutlinecolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_convexshape_setoutlinethickness_Bw9(void* self, float thickness);
VOIDCSFML_API sfml_convexshape_gettexture(void* self, void** result);
VOIDCSFML_API sfml_convexshape_gettexturerect(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getfillcolor(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getoutlinecolor(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getoutlinethickness(void* self, float* result);
VOIDCSFML_API sfml_convexshape_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_convexshape_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_convexshape_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_convexshape_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_convexshape_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_convexshape_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_convexshape_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_convexshape_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_convexshape_getposition(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getrotation(void* self, float* result);
VOIDCSFML_API sfml_convexshape_getscale(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getorigin(void* self, void* result);
VOIDCSFML_API sfml_convexshape_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_convexshape_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_convexshape_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_convexshape_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_convexshape_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_convexshape_gettransform(void* self, void* result);
VOIDCSFML_API sfml_convexshape_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_convexshape_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_convexshape_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_convexshape_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_convexshape_initialize_Ydx(void* self, void* copy);
VOIDCSFML_API sfml_glyph_allocate(void** result);
VOIDCSFML_API sfml_glyph_free(void* self);
VOIDCSFML_API sfml_glyph_initialize(void* self);
VOIDCSFML_API sfml_glyph_setadvance_Bw9(void* self, float advance);
VOIDCSFML_API sfml_glyph_setbounds_5MC(void* self, void* bounds);
VOIDCSFML_API sfml_glyph_settexturerect_POq(void* self, void* texture_rect);
VOIDCSFML_API sfml_glyph_initialize_UlF(void* self, void* copy);
VOIDCSFML_API sfml_image_allocate(void** result);
VOIDCSFML_API sfml_image_free(void* self);
VOIDCSFML_API sfml_image_initialize(void* self);
VOIDCSFML_API sfml_image_finalize(void* self);
VOIDCSFML_API sfml_image_create_emSemSQVe(void* self, unsigned int width, unsigned int height, void* color);
VOIDCSFML_API sfml_image_create_emSemS843(void* self, unsigned int width, unsigned int height, uint8_t* pixels);
VOIDCSFML_API sfml_image_loadfromfile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API sfml_image_loadfrommemory_5h8vgv(void* self, void* data, size_t size, unsigned char* result);
VOIDCSFML_API sfml_image_loadfromstream_PO0(void* self, void* stream, unsigned char* result);
VOIDCSFML_API sfml_image_savetofile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API sfml_image_getsize(void* self, void* result);
VOIDCSFML_API sfml_image_createmaskfromcolor_QVe9yU(void* self, void* color, uint8_t alpha);
VOIDCSFML_API sfml_image_copy_dptemSemS2k1GZq(void* self, void* source, unsigned int dest_x, unsigned int dest_y, void* source_rect, unsigned char apply_alpha);
VOIDCSFML_API sfml_image_setpixel_emSemSQVe(void* self, unsigned int x, unsigned int y, void* color);
VOIDCSFML_API sfml_image_getpixel_emSemS(void* self, unsigned int x, unsigned int y, void* result);
VOIDCSFML_API sfml_image_getpixelsptr(void* self, uint8_t** result);
VOIDCSFML_API sfml_image_fliphorizontally(void* self);
VOIDCSFML_API sfml_image_flipvertically(void* self);
VOIDCSFML_API sfml_image_initialize_dpt(void* self, void* copy);
VOIDCSFML_API sfml_texture_allocate(void** result);
VOIDCSFML_API sfml_texture_free(void* self);
VOIDCSFML_API sfml_texture_initialize(void* self);
VOIDCSFML_API sfml_texture_finalize(void* self);
VOIDCSFML_API sfml_texture_create_emSemS(void* self, unsigned int width, unsigned int height, unsigned char* result);
VOIDCSFML_API sfml_texture_loadfromfile_zkC2k1(void* self, size_t filename_size, char* filename, void* area, unsigned char* result);
VOIDCSFML_API sfml_texture_loadfrommemory_5h8vgv2k1(void* self, void* data, size_t size, void* area, unsigned char* result);
VOIDCSFML_API sfml_texture_loadfromstream_PO02k1(void* self, void* stream, void* area, unsigned char* result);
VOIDCSFML_API sfml_texture_loadfromimage_dpt2k1(void* self, void* image, void* area, unsigned char* result);
VOIDCSFML_API sfml_texture_getsize(void* self, void* result);
VOIDCSFML_API sfml_texture_copytoimage(void* self, void* result);
VOIDCSFML_API sfml_texture_update_843(void* self, uint8_t* pixels);
VOIDCSFML_API sfml_texture_update_843emSemSemSemS(void* self, uint8_t* pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y);
VOIDCSFML_API sfml_texture_update_dpt(void* self, void* image);
VOIDCSFML_API sfml_texture_update_dptemSemS(void* self, void* image, unsigned int x, unsigned int y);
VOIDCSFML_API sfml_texture_update_JRh(void* self, void* window);
VOIDCSFML_API sfml_texture_update_JRhemSemS(void* self, void* window, unsigned int x, unsigned int y);
VOIDCSFML_API sfml_texture_setsmooth_GZq(void* self, unsigned char smooth);
VOIDCSFML_API sfml_texture_issmooth(void* self, unsigned char* result);
VOIDCSFML_API sfml_texture_setsrgb_GZq(void* self, unsigned char s_rgb);
VOIDCSFML_API sfml_texture_issrgb(void* self, unsigned char* result);
VOIDCSFML_API sfml_texture_setrepeated_GZq(void* self, unsigned char repeated);
VOIDCSFML_API sfml_texture_isrepeated(void* self, unsigned char* result);
VOIDCSFML_API sfml_texture_generatemipmap(void* self, unsigned char* result);
VOIDCSFML_API sfml_texture_getnativehandle(void* self, unsigned int* result);
VOIDCSFML_API sfml_texture_bind_MXdK9j(void* texture, int coordinate_type);
VOIDCSFML_API sfml_texture_getmaximumsize(unsigned int* result);
VOIDCSFML_API sfml_texture_initialize_DJb(void* self, void* copy);
VOIDCSFML_API sfml_font_allocate(void** result);
VOIDCSFML_API sfml_font_free(void* self);
VOIDCSFML_API sfml_font_info_allocate(void** result);
VOIDCSFML_API sfml_font_info_initialize(void* self);
VOIDCSFML_API sfml_font_info_finalize(void* self);
VOIDCSFML_API sfml_font_info_free(void* self);
VOIDCSFML_API sfml_font_info_getfamily(void* self, char** result);
VOIDCSFML_API sfml_font_info_setfamily_Fzm(void* self, size_t family_size, char* family);
VOIDCSFML_API sfml_font_info_initialize_HPc(void* self, void* copy);
VOIDCSFML_API sfml_font_initialize(void* self);
VOIDCSFML_API sfml_font_finalize(void* self);
VOIDCSFML_API sfml_font_loadfromfile_zkC(void* self, size_t filename_size, char* filename, unsigned char* result);
VOIDCSFML_API sfml_font_loadfrommemory_5h8vgv(void* self, void* data, size_t size_in_bytes, unsigned char* result);
VOIDCSFML_API sfml_font_loadfromstream_PO0(void* self, void* stream, unsigned char* result);
VOIDCSFML_API sfml_font_getinfo(void* self, void** result);
VOIDCSFML_API sfml_font_getglyph_saLemSGZqBw9(void* self, uint32_t code_point, unsigned int character_size, unsigned char bold, float outline_thickness, void* result);
VOIDCSFML_API sfml_font_getkerning_saLsaLemS(void* self, uint32_t first, uint32_t second, unsigned int character_size, float* result);
VOIDCSFML_API sfml_font_getlinespacing_emS(void* self, unsigned int character_size, float* result);
VOIDCSFML_API sfml_font_getunderlineposition_emS(void* self, unsigned int character_size, float* result);
VOIDCSFML_API sfml_font_getunderlinethickness_emS(void* self, unsigned int character_size, float* result);
VOIDCSFML_API sfml_font_gettexture_emS(void* self, unsigned int character_size, void** result);
VOIDCSFML_API sfml_font_initialize_7CF(void* self, void* copy);
VOIDCSFML_API sfml_rectangleshape_allocate(void** result);
VOIDCSFML_API sfml_rectangleshape_finalize(void* self);
VOIDCSFML_API sfml_rectangleshape_free(void* self);
VOIDCSFML_API sfml_rectangleshape_initialize_UU2(void* self, void* size);
VOIDCSFML_API sfml_rectangleshape_setsize_UU2(void* self, void* size);
VOIDCSFML_API sfml_rectangleshape_getsize(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getpointcount(void* self, size_t* result);
VOIDCSFML_API sfml_rectangleshape_getpoint_vgv(void* self, size_t index, void* result);
VOIDCSFML_API sfml_rectangleshape_settexture_MXdGZq(void* self, void* texture, unsigned char reset_rect);
VOIDCSFML_API sfml_rectangleshape_settexturerect_2k1(void* self, void* rect);
VOIDCSFML_API sfml_rectangleshape_setfillcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_rectangleshape_setoutlinecolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_rectangleshape_setoutlinethickness_Bw9(void* self, float thickness);
VOIDCSFML_API sfml_rectangleshape_gettexture(void* self, void** result);
VOIDCSFML_API sfml_rectangleshape_gettexturerect(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getfillcolor(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getoutlinecolor(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getoutlinethickness(void* self, float* result);
VOIDCSFML_API sfml_rectangleshape_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_rectangleshape_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_rectangleshape_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_rectangleshape_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_rectangleshape_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_rectangleshape_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_rectangleshape_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_rectangleshape_getposition(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getrotation(void* self, float* result);
VOIDCSFML_API sfml_rectangleshape_getscale(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getorigin(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_rectangleshape_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_rectangleshape_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_rectangleshape_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_rectangleshape_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_rectangleshape_gettransform(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_rectangleshape_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_rectangleshape_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_rectangleshape_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_rectangleshape_initialize_wlj(void* self, void* copy);
VOIDCSFML_API sfml_view_allocate(void** result);
VOIDCSFML_API sfml_view_finalize(void* self);
VOIDCSFML_API sfml_view_free(void* self);
VOIDCSFML_API sfml_view_initialize(void* self);
VOIDCSFML_API sfml_view_initialize_WPZ(void* self, void* rectangle);
VOIDCSFML_API sfml_view_initialize_UU2UU2(void* self, void* center, void* size);
VOIDCSFML_API sfml_view_setcenter_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_view_setcenter_UU2(void* self, void* center);
VOIDCSFML_API sfml_view_setsize_Bw9Bw9(void* self, float width, float height);
VOIDCSFML_API sfml_view_setsize_UU2(void* self, void* size);
VOIDCSFML_API sfml_view_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_view_setviewport_WPZ(void* self, void* viewport);
VOIDCSFML_API sfml_view_reset_WPZ(void* self, void* rectangle);
VOIDCSFML_API sfml_view_getcenter(void* self, void* result);
VOIDCSFML_API sfml_view_getsize(void* self, void* result);
VOIDCSFML_API sfml_view_getrotation(void* self, float* result);
VOIDCSFML_API sfml_view_getviewport(void* self, void* result);
VOIDCSFML_API sfml_view_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_view_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_view_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_view_zoom_Bw9(void* self, float factor);
VOIDCSFML_API sfml_view_gettransform(void* self, void* result);
VOIDCSFML_API sfml_view_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_view_initialize_DDi(void* self, void* copy);
VOIDCSFML_API sfml_rendertarget_allocate(void** result);
VOIDCSFML_API sfml_rendertarget_free(void* self);
VOIDCSFML_API sfml_rendertarget_clear_QVe(void* self, void* color);
VOIDCSFML_API sfml_rendertarget_setview_DDi(void* self, void* view);
VOIDCSFML_API sfml_rendertarget_getview(void* self, void** result);
VOIDCSFML_API sfml_rendertarget_getdefaultview(void* self, void** result);
VOIDCSFML_API sfml_rendertarget_getviewport_DDi(void* self, void* view, void* result);
VOIDCSFML_API sfml_rendertarget_mappixeltocoords_ufV(void* self, void* point, void* result);
VOIDCSFML_API sfml_rendertarget_mappixeltocoords_ufVDDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_rendertarget_mapcoordstopixel_UU2(void* self, void* point, void* result);
VOIDCSFML_API sfml_rendertarget_mapcoordstopixel_UU2DDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_rendertarget_draw_46svgvu9wmi4(void* self, void* vertices, size_t vertex_count, int type, void* states);
VOIDCSFML_API sfml_rendertarget_pushglstates(void* self);
VOIDCSFML_API sfml_rendertarget_popglstates(void* self);
VOIDCSFML_API sfml_rendertarget_resetglstates(void* self);
VOIDCSFML_API sfml_rendertexture_allocate(void** result);
VOIDCSFML_API sfml_rendertexture_free(void* self);
VOIDCSFML_API sfml_rendertexture_initialize(void* self);
VOIDCSFML_API sfml_rendertexture_finalize(void* self);
VOIDCSFML_API sfml_rendertexture_create_emSemSGZq(void* self, unsigned int width, unsigned int height, unsigned char depth_buffer, unsigned char* result);
VOIDCSFML_API sfml_rendertexture_setsmooth_GZq(void* self, unsigned char smooth);
VOIDCSFML_API sfml_rendertexture_issmooth(void* self, unsigned char* result);
VOIDCSFML_API sfml_rendertexture_setrepeated_GZq(void* self, unsigned char repeated);
VOIDCSFML_API sfml_rendertexture_isrepeated(void* self, unsigned char* result);
VOIDCSFML_API sfml_rendertexture_generatemipmap(void* self, unsigned char* result);
VOIDCSFML_API sfml_rendertexture_setactive_GZq(void* self, unsigned char active, unsigned char* result);
VOIDCSFML_API sfml_rendertexture_display(void* self);
VOIDCSFML_API sfml_rendertexture_getsize(void* self, void* result);
VOIDCSFML_API sfml_rendertexture_gettexture(void* self, void** result);
VOIDCSFML_API sfml_rendertexture_clear_QVe(void* self, void* color);
VOIDCSFML_API sfml_rendertexture_setview_DDi(void* self, void* view);
VOIDCSFML_API sfml_rendertexture_getview(void* self, void** result);
VOIDCSFML_API sfml_rendertexture_getdefaultview(void* self, void** result);
VOIDCSFML_API sfml_rendertexture_getviewport_DDi(void* self, void* view, void* result);
VOIDCSFML_API sfml_rendertexture_mappixeltocoords_ufV(void* self, void* point, void* result);
VOIDCSFML_API sfml_rendertexture_mappixeltocoords_ufVDDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_rendertexture_mapcoordstopixel_UU2(void* self, void* point, void* result);
VOIDCSFML_API sfml_rendertexture_mapcoordstopixel_UU2DDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_rendertexture_draw_46svgvu9wmi4(void* self, void* vertices, size_t vertex_count, int type, void* states);
VOIDCSFML_API sfml_rendertexture_pushglstates(void* self);
VOIDCSFML_API sfml_rendertexture_popglstates(void* self);
VOIDCSFML_API sfml_rendertexture_resetglstates(void* self);
VOIDCSFML_API sfml_renderwindow_allocate(void** result);
VOIDCSFML_API sfml_renderwindow_free(void* self);
VOIDCSFML_API sfml_renderwindow_initialize(void* self);
VOIDCSFML_API sfml_renderwindow_initialize_wg0bQssaLFw4(void* self, void* mode, size_t title_size, uint32_t* title, uint32_t style, void* settings);
VOIDCSFML_API sfml_renderwindow_initialize_rLQFw4(void* self, SFMLWindowHandle handle, void* settings);
VOIDCSFML_API sfml_renderwindow_finalize(void* self);
VOIDCSFML_API sfml_renderwindow_getsize(void* self, void* result);
VOIDCSFML_API sfml_renderwindow_capture(void* self, void* result);
VOIDCSFML_API sfml_renderwindow_create_wg0bQssaLFw4(void* self, void* mode, size_t title_size, uint32_t* title, uint32_t style, void* settings);
VOIDCSFML_API sfml_renderwindow_create_rLQFw4(void* self, SFMLWindowHandle handle, void* settings);
VOIDCSFML_API sfml_renderwindow_close(void* self);
VOIDCSFML_API sfml_renderwindow_isopen(void* self, unsigned char* result);
VOIDCSFML_API sfml_renderwindow_getsettings(void* self, void* result);
VOIDCSFML_API sfml_renderwindow_pollevent_YJW(void* self, void* event, unsigned char* result);
VOIDCSFML_API sfml_renderwindow_waitevent_YJW(void* self, void* event, unsigned char* result);
VOIDCSFML_API sfml_renderwindow_getposition(void* self, void* result);
VOIDCSFML_API sfml_renderwindow_setposition_ufV(void* self, void* position);
VOIDCSFML_API sfml_renderwindow_setsize_DXO(void* self, void* size);
VOIDCSFML_API sfml_renderwindow_settitle_bQs(void* self, size_t title_size, uint32_t* title);
VOIDCSFML_API sfml_renderwindow_seticon_emSemS843(void* self, unsigned int width, unsigned int height, uint8_t* pixels);
VOIDCSFML_API sfml_renderwindow_setvisible_GZq(void* self, unsigned char visible);
VOIDCSFML_API sfml_renderwindow_setverticalsyncenabled_GZq(void* self, unsigned char enabled);
VOIDCSFML_API sfml_renderwindow_setmousecursorvisible_GZq(void* self, unsigned char visible);
VOIDCSFML_API sfml_renderwindow_setmousecursorgrabbed_GZq(void* self, unsigned char grabbed);
VOIDCSFML_API sfml_renderwindow_setkeyrepeatenabled_GZq(void* self, unsigned char enabled);
VOIDCSFML_API sfml_renderwindow_setframeratelimit_emS(void* self, unsigned int limit);
VOIDCSFML_API sfml_renderwindow_setjoystickthreshold_Bw9(void* self, float threshold);
VOIDCSFML_API sfml_renderwindow_setactive_GZq(void* self, unsigned char active, unsigned char* result);
VOIDCSFML_API sfml_renderwindow_requestfocus(void* self);
VOIDCSFML_API sfml_renderwindow_hasfocus(void* self, unsigned char* result);
VOIDCSFML_API sfml_renderwindow_display(void* self);
VOIDCSFML_API sfml_renderwindow_getsystemhandle(void* self, SFMLWindowHandle* result);
VOIDCSFML_API sfml_renderwindow_clear_QVe(void* self, void* color);
VOIDCSFML_API sfml_renderwindow_setview_DDi(void* self, void* view);
VOIDCSFML_API sfml_renderwindow_getview(void* self, void** result);
VOIDCSFML_API sfml_renderwindow_getdefaultview(void* self, void** result);
VOIDCSFML_API sfml_renderwindow_getviewport_DDi(void* self, void* view, void* result);
VOIDCSFML_API sfml_renderwindow_mappixeltocoords_ufV(void* self, void* point, void* result);
VOIDCSFML_API sfml_renderwindow_mappixeltocoords_ufVDDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_renderwindow_mapcoordstopixel_UU2(void* self, void* point, void* result);
VOIDCSFML_API sfml_renderwindow_mapcoordstopixel_UU2DDi(void* self, void* point, void* view, void* result);
VOIDCSFML_API sfml_renderwindow_draw_46svgvu9wmi4(void* self, void* vertices, size_t vertex_count, int type, void* states);
VOIDCSFML_API sfml_renderwindow_pushglstates(void* self);
VOIDCSFML_API sfml_renderwindow_popglstates(void* self);
VOIDCSFML_API sfml_renderwindow_resetglstates(void* self);
VOIDCSFML_API sfml_shader_allocate(void** result);
VOIDCSFML_API sfml_shader_free(void* self);
VOIDCSFML_API sfml_shader_initialize(void* self);
VOIDCSFML_API sfml_shader_finalize(void* self);
VOIDCSFML_API sfml_shader_loadfromfile_zkCqL0(void* self, size_t filename_size, char* filename, int type, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfromfile_zkCzkC(void* self, size_t vertex_shader_filename_size, char* vertex_shader_filename, size_t fragment_shader_filename_size, char* fragment_shader_filename, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfromfile_zkCzkCzkC(void* self, size_t vertex_shader_filename_size, char* vertex_shader_filename, size_t geometry_shader_filename_size, char* geometry_shader_filename, size_t fragment_shader_filename_size, char* fragment_shader_filename, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfrommemory_zkCqL0(void* self, size_t shader_size, char* shader, int type, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfrommemory_zkCzkC(void* self, size_t vertex_shader_size, char* vertex_shader, size_t fragment_shader_size, char* fragment_shader, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfrommemory_zkCzkCzkC(void* self, size_t vertex_shader_size, char* vertex_shader, size_t geometry_shader_size, char* geometry_shader, size_t fragment_shader_size, char* fragment_shader, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfromstream_PO0qL0(void* self, void* stream, int type, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfromstream_PO0PO0(void* self, void* vertex_shader_stream, void* fragment_shader_stream, unsigned char* result);
VOIDCSFML_API sfml_shader_loadfromstream_PO0PO0PO0(void* self, void* vertex_shader_stream, void* geometry_shader_stream, void* fragment_shader_stream, unsigned char* result);
VOIDCSFML_API sfml_shader_setparameter_zkCBw9(void* self, size_t name_size, char* name, float x);
VOIDCSFML_API sfml_shader_setparameter_zkCBw9Bw9(void* self, size_t name_size, char* name, float x, float y);
VOIDCSFML_API sfml_shader_setparameter_zkCBw9Bw9Bw9(void* self, size_t name_size, char* name, float x, float y, float z);
VOIDCSFML_API sfml_shader_setparameter_zkCBw9Bw9Bw9Bw9(void* self, size_t name_size, char* name, float x, float y, float z, float w);
VOIDCSFML_API sfml_shader_setparameter_zkCUU2(void* self, size_t name_size, char* name, void* vector);
VOIDCSFML_API sfml_shader_setparameter_zkCNzM(void* self, size_t name_size, char* name, void* vector);
VOIDCSFML_API sfml_shader_setparameter_zkCQVe(void* self, size_t name_size, char* name, void* color);
VOIDCSFML_API sfml_shader_setparameter_zkCFPe(void* self, size_t name_size, char* name, void* transform);
VOIDCSFML_API sfml_shader_setparameter_zkCDJb(void* self, size_t name_size, char* name, void* texture);
VOIDCSFML_API sfml_shader_setparameter_zkCLcV(void* self, size_t name_size, char* name);
VOIDCSFML_API sfml_shader_getnativehandle(void* self, unsigned int* result);
VOIDCSFML_API sfml_shader_bind_8P6(void* shader);
VOIDCSFML_API sfml_shader_isavailable(unsigned char* result);
VOIDCSFML_API sfml_shader_isgeometryavailable(unsigned char* result);
VOIDCSFML_API sfml_sprite_allocate(void** result);
VOIDCSFML_API sfml_sprite_finalize(void* self);
VOIDCSFML_API sfml_sprite_free(void* self);
VOIDCSFML_API sfml_sprite_initialize(void* self);
VOIDCSFML_API sfml_sprite_initialize_DJb(void* self, void* texture);
VOIDCSFML_API sfml_sprite_initialize_DJb2k1(void* self, void* texture, void* rectangle);
VOIDCSFML_API sfml_sprite_settexture_DJbGZq(void* self, void* texture, unsigned char reset_rect);
VOIDCSFML_API sfml_sprite_settexturerect_2k1(void* self, void* rectangle);
VOIDCSFML_API sfml_sprite_setcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_sprite_gettexture(void* self, void** result);
VOIDCSFML_API sfml_sprite_gettexturerect(void* self, void* result);
VOIDCSFML_API sfml_sprite_getcolor(void* self, void* result);
VOIDCSFML_API sfml_sprite_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_sprite_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_sprite_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_sprite_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_sprite_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_sprite_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_sprite_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_sprite_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_sprite_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_sprite_getposition(void* self, void* result);
VOIDCSFML_API sfml_sprite_getrotation(void* self, float* result);
VOIDCSFML_API sfml_sprite_getscale(void* self, void* result);
VOIDCSFML_API sfml_sprite_getorigin(void* self, void* result);
VOIDCSFML_API sfml_sprite_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_sprite_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_sprite_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_sprite_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_sprite_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_sprite_gettransform(void* self, void* result);
VOIDCSFML_API sfml_sprite_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_sprite_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_sprite_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_sprite_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_sprite_initialize_8xu(void* self, void* copy);
VOIDCSFML_API sfml_text_allocate(void** result);
VOIDCSFML_API sfml_text_finalize(void* self);
VOIDCSFML_API sfml_text_free(void* self);
VOIDCSFML_API sfml_text_initialize(void* self);
VOIDCSFML_API sfml_text_initialize_bQs7CFemS(void* self, size_t string_size, uint32_t* string, void* font, unsigned int character_size);
VOIDCSFML_API sfml_text_setstring_bQs(void* self, size_t string_size, uint32_t* string);
VOIDCSFML_API sfml_text_setfont_7CF(void* self, void* font);
VOIDCSFML_API sfml_text_setcharactersize_emS(void* self, unsigned int size);
VOIDCSFML_API sfml_text_setstyle_saL(void* self, uint32_t style);
VOIDCSFML_API sfml_text_setcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_text_setfillcolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_text_setoutlinecolor_QVe(void* self, void* color);
VOIDCSFML_API sfml_text_setoutlinethickness_Bw9(void* self, float thickness);
VOIDCSFML_API sfml_text_getstring(void* self, uint32_t** result);
VOIDCSFML_API sfml_text_getfont(void* self, void** result);
VOIDCSFML_API sfml_text_getcharactersize(void* self, unsigned int* result);
VOIDCSFML_API sfml_text_getstyle(void* self, uint32_t* result);
VOIDCSFML_API sfml_text_getcolor(void* self, void* result);
VOIDCSFML_API sfml_text_getfillcolor(void* self, void* result);
VOIDCSFML_API sfml_text_getoutlinecolor(void* self, void* result);
VOIDCSFML_API sfml_text_getoutlinethickness(void* self, float* result);
VOIDCSFML_API sfml_text_findcharacterpos_vgv(void* self, size_t index, void* result);
VOIDCSFML_API sfml_text_getlocalbounds(void* self, void* result);
VOIDCSFML_API sfml_text_getglobalbounds(void* self, void* result);
VOIDCSFML_API sfml_text_setposition_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_text_setposition_UU2(void* self, void* position);
VOIDCSFML_API sfml_text_setrotation_Bw9(void* self, float angle);
VOIDCSFML_API sfml_text_setscale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_text_setscale_UU2(void* self, void* factors);
VOIDCSFML_API sfml_text_setorigin_Bw9Bw9(void* self, float x, float y);
VOIDCSFML_API sfml_text_setorigin_UU2(void* self, void* origin);
VOIDCSFML_API sfml_text_getposition(void* self, void* result);
VOIDCSFML_API sfml_text_getrotation(void* self, float* result);
VOIDCSFML_API sfml_text_getscale(void* self, void* result);
VOIDCSFML_API sfml_text_getorigin(void* self, void* result);
VOIDCSFML_API sfml_text_move_Bw9Bw9(void* self, float offset_x, float offset_y);
VOIDCSFML_API sfml_text_move_UU2(void* self, void* offset);
VOIDCSFML_API sfml_text_rotate_Bw9(void* self, float angle);
VOIDCSFML_API sfml_text_scale_Bw9Bw9(void* self, float factor_x, float factor_y);
VOIDCSFML_API sfml_text_scale_UU2(void* self, void* factor);
VOIDCSFML_API sfml_text_gettransform(void* self, void* result);
VOIDCSFML_API sfml_text_getinversetransform(void* self, void* result);
VOIDCSFML_API sfml_text_draw_kb9RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_text_draw_fqURoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_text_draw_Xk1RoT(void* self, void* target, void* states);
VOIDCSFML_API sfml_text_initialize_clM(void* self, void* copy);
#endif
